---
layout: post
title:  "Rust challenge 20/100 - crc16 in webassembly"
date:   2021-11-05 21:00:00 +0100
categories: rust
redirect_from:
  - /post/2021-11-03-100rust-20
---

#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [20th Challenge](#20th-challenge)
	- [Challenge](#challenge)
	- [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->

![](/assets/img/crc.jpeg)


## What is this :grey_question: 

The rules of the game are explained [in my original post](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 20th Challenge
### Challenge

Calculate crc16-EN_13757 in Rust and create a webassembly package that can be run from javascript. The motivation here
is that crc is much simpler and faster in RUST.


### Solution :white_check_mark:

	{% highlight rust %}
	mod utils;
	use wasm_bindgen::prelude::*;
	use crc16::{EN_13757, State};
	use hex::FromHexError;

	// When the `wee_alloc` feature is enabled, use `wee_alloc` as the global
	// allocator.
	#[cfg(feature = "wee_alloc")]
	#[global_allocator]
	static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

	#[wasm_bindgen]
	extern {
	    fn alert(s: &str);
	}

	#[wasm_bindgen]
	pub fn crc16_en_13757(s: &str) -> String {
	    let a= hex::decode(&s);
	    match a {
	        Ok(_) => {format!("{:#04x}",State::<EN_13757>::calculate(&a.unwrap()))},
	        Err(_) => String::from("Error calculating CRC16, invalid input.")
	    }
	}
	{% endhighlight %}

With a simple `html` the web assembly is tested. A Hex string of 50 million charcters is calculated within `800ms` :astonished:

	{% highlight html %}
	<!DOCTYPE html>
	<html>
	  <head>
	    <meta charset="utf-8">
	    <title>hello-wasm example</title>
	  </head>
	  <body>
	    <script type="module">
	      import init, {crc16_en_13757} from "./assets/pkg/crc16_en_13757.js";
	      init()
	        .then(() => {
	          const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');
	          var input = genRanHex(50000000);
	          let before = Date.now();
	          var crc16=crc16_en_13757(input);
	          let after = Date.now();
	          alert(after-before);
	        });
	    </script>
	  </body>
	</html>
	{% endhighlight %}


<script type="module">
  import init, {crc16_en_13757} from "{{ site.baseurl }}{% link assets/js/crc16_EN_13757.js %}";
  init()
  document.getElementById('calculate').addEventListener('click', () => {
  var x=crc16_en_13757(document.getElementById('inputstring').value);
  document.getElementById("output").innerText=x;
});
</script>
<form>
<label for="inputstring">Input String:</label><br>
<textarea rows="5" cols="80" id="inputstring"></textarea><br>
<input id="calculate" type="button" value="calculate" />
</form><br>
Result:<br>
<div id="output"></div>
<br>

To see the full source see [github](https://github.com/maebli/100rustsnippets/tree/master/crc16-EN-13757).
