---
layout: post
title:  "Rust challenge 81/100 - aoc2024 day 1"
date:   2024-12-01 12:00:00 +0100
categories: rust
redirect_from:
  - /rust/2024/12/01/100rust-81
---


#  Table of content
- [Table of content](#table-of-content)
  - [What is this :grey\_question:](#what-is-this-grey_question)
  - [81st Challenge](#81st-challenge)
    - [Challenge](#challenge)
    - [Solution :white\_check\_mark:](#solution-white_check_mark)

## What is this :grey_question: 

The rules of the game are explained [in my original](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 81st Challenge
### Challenge

Like every year, I am going to participate in the [Advent of Code](https://adventofcode.com/). 
Lets get started with [advent of code](https://adventofcode.com/2024/day/1)

### Solution :white_check_mark:

```rust
fn main() {
    let input = include_str!("input.txt");
    let numbers = input.split_whitespace();

    let mut left = numbers
        .clone() 
        .enumerate()
        .filter(|(i, _)| i % 2 == 0)
        .map(|(_, n)| n.parse::<i32>().unwrap())
        .collect::<Vec<i32>>();

    let mut numbers = input.split_whitespace(); 
    let mut right = numbers
        .enumerate()
        .filter(|(i, _)| i % 2 == 1)
        .map(|(_, n)| n.parse::<i32>().unwrap())
        .collect::<Vec<i32>>();

    left.sort();
    right.sort();

    let result = left
        .iter()
        .zip(right.iter())
        .map(|(l, r)| (l - r).abs())
        .sum::<i32>();

    let result2: usize = left
        .iter()
        .map(|&l| (l as usize)*right.iter().filter(|&&x| x == l).count())
        .sum();

    println!("Result1: {}", result);
    println!("Result2: {}", result2);
}
```


