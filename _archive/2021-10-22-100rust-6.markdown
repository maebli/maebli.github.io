---
layout: post
title:  "Rust challenge 6/100- Insertion Sort"
date:   2021-10-23 21:00:00 +0100
categories: rust
redirect_from:
  - /rust/2021/10/22/100rust-6
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this?](#what-is-this)
- [6th Challenge](#6th-challenge)
	- [Challenge](#challenge)
	- [Solution](#solution)

<!-- /MarkdownTOC -->

## What is this?

The rules of the game are explained [in my original post](https://maebli.github.io/rust/2021/10/18/100rust.html).

## 6th Challenge
### Challenge

Today I will try to sort a set of integers from smallest to biggest using recursion.


### Solution

Here is my solution.

	{% highlight rust %}
	fn sort(unsorted:&[i32]) -> Vec<i32>{
	    let mut sorted:Vec<i32> = Vec::new();

	    if unsorted.len() == 1 {
	       sorted.push(unsorted[0]);
	    }else {
	        sorted = sort(&unsorted[1..]);

	        for x in 0..sorted.len() {
	            if unsorted[0] < sorted.as_slice()[x] {
	                sorted.insert(x, unsorted[0]);
	                break;
	            }else if x == sorted.len()-1{
	                sorted.push(unsorted[0]);
	            }
	        }
	    }

	    sorted
	}

	#[test]
	fn test_sort(){
	    let unsorted = vec![9, 8, 3, 7, 28, -4, -99999];
	    let sorted = vec![-99999,-4,3,7,8,9,28];
	    assert_eq!(sort(&unsorted),sorted);
	}
	{% endhighlight %}

See [github](https://github.com/maebli/100rustsnippets/tree/master/sorter) and [playground](https://play.rust-lang.org/?version=stable&edition=2018&gist=eef058b0c37a02823a396c173354d526)
