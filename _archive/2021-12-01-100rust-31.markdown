---
layout: post
title:  "Rust challenge 31/100 - advent of code 2021 day 1 part 1 & 2"
date:   2021-12-01 21:00:00 +0100
categories: rust
redirect_from:
  - /post/2021-12-01-100rust-31
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [31st Challenge](#31st-challenge)
	- [Challenge](#challenge)
	- [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->
![](/assets/img/aoc.png)
## What is this :grey_question: 

The rules of the game are explained [in my original post](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 31st Challenge
### Challenge

Today I'm solving today's [AoC day 1 2021](https://adventofcode.com/2021/day/1). It took me longer than it I would have liked.
I wanted to do it quickly with a `filter` or `fold` function, which didn't work. I ran out of time and had to leave for work :sweat:.



### Solution :white_check_mark:

I peaked at the python solution on [](www.reddit.com/r/adventofcode) which used the `zip` function I had not come across before. Basically
it makes a tuple out of two iterators. Using this as well as `multizip` I was able to implement the functions. 

	{% highlight rust %}
	 use itertools::multizip;

	fn main() {

	    let a= INPUT.lines()
	        .map(|x|{x.parse().unwrap()})
	        .collect::<Vec<u32>>();

	    let c:Vec<u32> = multizip((a.iter(),a.iter().skip(1),a.iter().skip(2)))
	        .map(|x|{x.0+x.1+x.2})
	        .collect();

	    println!("sol1:{}, sol2:{}",count_bigger(&a),count_bigger(&c));

	}

	fn count_bigger(a: &Vec<u32>) -> usize {
	    a.iter()
	        .zip(a.iter().skip(1))
	        .filter(|x| { x.0 < x.1 })
	        .count()
	}


	const INPUT:&str = "199
	200
	208
	210
	200
	207
	240
	269
	260
	263";
	{% endhighlight %}


To see the full source see [github](https://github.com/maebli/100rustsnippets/tree/master/aoc-2021-day1) and see the live demo in [playground](https://play.rust-lang.org/?version=stable&edition=2021&gist=a29f5ab10ec865d5209ba0c286d62ca4). 


