---
layout: post
title:  "Rust challenge 30/100 - advent of code 2020 day 3  part 1 and 2 (fixed)"
date:   2021-11-29 21:00:00 +0100
categories: rust
redirect_from:
  - /post/2021-11-30-100rust-30
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [29th Challenge](#29th-challenge)
	- [Challenge](#challenge)
	- [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->
![](/assets/img/aoc.png)
## What is this :grey_question: 

The rules of the game are explained [in my original post](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 30th Challenge
### Challenge

Today I'm solving last year's [AoC day 3 2020](ttps://adventofcode.com/2020/day/3) using rust macros whenever possible.
[In yesterday's solution](https://maebli.github.io/rust/2021/11/29/100rust-29.html) there was a small bug in my code, I will try to solve that today.

### Solution :white_check_mark:

The issue was with slope number four. I repeated the challenge for just number four

	{% highlight rust %}
    println!("{}",INPUT.lines()
                .enumerate()
                .filter(|x| { (x.0%2 == 0) && (x.1.chars().nth((x.0/2)%31).unwrap() == '#')})
                .count());
	{% endhighlight %}


From this huntch I was able to solve the issue. 

	{% highlight rust %}
	fn main() {
	    println!("product: {}",slope_product!(INPUT,0,1,2,3,4));
	}


	#[macro_export]
	macro_rules! slope_product {
	    ( $input:expr,$( $x:expr ),* ) => {
	        {
	            let mut prod = 1;
	            $(
	                println!("slope: {}",slope!($x,$input));
	                prod*=slope!($x,$input);
	            )*
	            prod
	        }
	    };
	}

	#[macro_export]
	macro_rules! slope {
	    (  $slope:expr,$input:expr ) => {
	        {
	            $input.lines()
	                    .enumerate()
	                    .filter(|x| {is_tree!($slope,x.0,x.1)})
	                    .count()
	        }
	    };
	}

	#[macro_export]
	macro_rules! is_tree {
	    ($slope:expr,$i:expr,$s:expr) => {
	        {
	            match $slope {
	                4 => {(($i%2)==0) && $s.chars().nth(($i/2)%$s.chars().count()).unwrap() == '#'},
	                _ => $s.chars().nth(($i*(1+$slope*2))%$s.chars().count()).unwrap() == '#'
	            }

	        }
	    };

	}

	const INPUT: &str ="..##.........##.........##.........##.........##.........##.......
		#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
		.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
		..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
		.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
		..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....
		.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
		.#........#.#........#.#........#.#........#.#........#.#........#
		#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
		#...##....##...##....##...##....##...##....##...##....##...##....#
		.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#
		";
	{% endhighlight %}


To see the full source see [github](https://github.com/maebli/100rustsnippets/tree/master/aco-2020-day3) and see the live demo in [playground](https://play.rust-lang.org/?version=stable&edition=2021&gist=5c76a719c6020eabf49a778b1d754122). 
