---
layout: post
title:  "Rust challenge 57/100 - making the generic node buzz"
date:   2022-09-29 18:30:00 +0100
categories: rust
redirect_from:
  - /rust/2022/09/29/100rust-57
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [57th Challenge](#57th-challenge)
    - [Challenge](#challenge)
    - [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->

## What is this :grey_question: 

The rules of the game are explained [in my original](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 57th Challenge
### Challenge

Build on yesterday's example and use the buzzer of the generic node to make a buzz! ðŸ“£
Here is a picture of the generic node again. Its a piece of hardware with an STM32WL5x and has a bunch of sensors and actuators
as well as the possibility to use LoRaWAN.

![](/assets/img/genericnode.png)

### Solution :white_check_mark:

Lets start from a template again, same folder as yesterday. 

    {% highlight bash %}
    cargo generate \
    --git https://github.com/stm32-rs/stm32wlxx-hal\
    --name stm32
    {% endhighlight %}

The template, looks like this, when running `tree -L 3`

    {% highlight bash %}
    .
    â”œâ”€â”€ CHANGELOG.md
    â”œâ”€â”€ Cargo.lock
    â”œâ”€â”€ Cargo.toml
    â”œâ”€â”€ LICENSE-APACHE
    â”œâ”€â”€ LICENSE-MIT
    â”œâ”€â”€ README.md
    â”œâ”€â”€ examples
    â”‚Â Â  â”œâ”€â”€ Cargo.toml
    â”‚Â Â  â”œâ”€â”€ examples
    â”‚Â Â  â””â”€â”€ src
    â”œâ”€â”€ hal
    â”‚Â Â  â”œâ”€â”€ Cargo.toml
    â”‚Â Â  â””â”€â”€ src
    â”œâ”€â”€ lora-e5-bsp
    â”‚Â Â  â”œâ”€â”€ Cargo.toml
    â”‚Â Â  â”œâ”€â”€ README.md
    â”‚Â Â  â””â”€â”€ src
    â”œâ”€â”€ memory.x
    â”œâ”€â”€ nucleo-wl55jc-bsp
    â”‚Â Â  â”œâ”€â”€ Cargo.toml
    â”‚Â Â  â”œâ”€â”€ README.md
    â”‚Â Â  â””â”€â”€ src
    â”œâ”€â”€ rustfmt.toml
    â””â”€â”€ testsuite
        â”œâ”€â”€ Cargo.toml
        â”œâ”€â”€ README.md
        â”œâ”€â”€ runall.py
        â””â”€â”€ src
    {% endhighlight %}


To run tests we run `DEFMT_LOG=info cargo test -p testsuite --target thumbv7em-none-eabi --bin pka`.

To keep things simple, we will add an additional example, instead of doing something complicated. The buzzer is a "Piezo speaker - provides audible feedback." According to the [documentation](https://www.genericnode.com/docs/sensor-edition/hardware/se-board/)
it is connected to `PA15 - internally connected to the piezo speaker`. The schematic can be found under [following link](https://github.com/TheThingsIndustries/generic-node-se/blob/develop/Hardware/sch/sch-stm32wl.pdf). The relevant part looks as follows. 

![](/assets/img/buzzer.png)

The datasheet of the buzzer `MLT-7525` shows that the oscillation frequency is `2700Hz` which you can listen to on[youtube](https://www.youtube.com/watch?v=eGZvKFEDAE8) - it sounds annoying. 
![](/assets/img/buzzer2.png). So we must toggle the output at the resonant frequency of `2700 Hz`, which means we need to toggle the GPIO every `185e-6` seconds. This means we toggle -> delay_us(185)permantently to activate the buzzer if we do it very simply and in a blocking manner.

    {% highlight bash %}

    Michaels-MBP-10:stm32 michael$ DEFMT_LOG=trace cargo run-ex buzzer
        Blocking waiting for file lock on build directory
       Compiling defmt-macros v0.3.2
       Compiling defmt v0.3.2
       Compiling panic-probe v0.3.0
       Compiling defmt-rtt v0.3.2
       Compiling stm32wlxx-hal v0.6.1 (/Volumes/data/4_github/learn-rust/100-rust-snippets/stm32/hal)
       Compiling examples v0.1.0 (/Volumes/data/4_github/learn-rust/100-rust-snippets/stm32/examples)
        Finished dev [optimized + debuginfo] target(s) in 10.33s
         Running `probe-run --chip STM32WLE5JCIx --connect-under-reset target/thumbv7em-none-eabi/debug/examples/buzzer`
    (HOST) INFO  flashing program (11 pages / 11.00 KiB)
    (HOST) INFO  success!
    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    INFO  Starting buzzer
    â””â”€ buzzer::__cortex_m_rt_main @ examples/examples/buzzer.rs:27

    {% endhighlight %}


And here we have it the result running on the target:

<iframe src="https://streamable.com/e/kxsmcw" width="200" height="356" frameborder="0" allowfullscreen></iframe>

 See the repo on [as a fork of the original repos](https://github.com/maebli/stm32wlxx-hal).  For the lazy, here is the source embedded into this page:

    {% highlight rust %}
    // Sounds a buzzer, will work only for TTN Generic node with STM32WL5x
    // see https://github.com/TheThingsIndustries/generic-node-se
    // The datasheet of the buzzer `MLT-7525` shows that the oscillation frequency is `2700Hz` so the period
    // is around 185us

    #![no_std]
    #![no_main]

    use defmt_rtt as _; // global logger
    use panic_probe as _; // panic handler

    use stm32wlxx_hal::{
        self as hal,
        cortex_m::{self, delay::Delay},
        gpio::{pins, Output, PinState, PortA},
        pac,
        util::new_delay,
    };

    #[hal::cortex_m_rt::entry]
    fn main() -> ! {
        let mut dp: pac::Peripherals = defmt::unwrap!(pac::Peripherals::take());
        let cp: pac::CorePeripherals = defmt::unwrap!(pac::CorePeripherals::take());

        let gpioa: PortA = PortA::split(dp.GPIOA, &mut dp.RCC);
        let mut buzzer: Output<pins::A15> =
            cortex_m::interrupt::free(|cs| Output::default(gpioa.a15, cs));

        let mut delay: Delay = new_delay(cp.SYST, &dp.RCC);

        defmt::info!("Starting buzzer");

        loop {
            for &level in &[PinState::High, PinState::Low] {
                buzzer.set_level(level);
                delay.delay_us(185);
            }
        }
    }
    {% endhighlight %}

