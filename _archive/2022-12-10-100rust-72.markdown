---
layout: post
title:  "Rust challenge 72/100 - aoc 2022 day10"
date:   2022-12-10 15:05:00 +0100
categories: rust
redirect_from:
  - /rust/2022/12/10/100rust-72
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [72nd Challenge](#72nd-challenge)
    - [Challenge](#challenge)
    - [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->

## What is this :grey_question: 

The rules of the game are explained [in my original](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 72nd Challenge
### Challenge

Solve today's AOC challange.ðŸŽ…ðŸ¦€

### Solution :white_check_mark:

Here's my solution:

    {% highlight rust %}
    fn main() {
        let x = signal_strenth(include_str!("../input.txt"));
        println!("{:?}",x);
        render(include_str!("../input.txt"));
    }


    fn signal_strenth(input:&str) -> u64 {
        input.lines().fold(vec![1],|mut acc,curr|{
            let last = *acc.last().unwrap();
            acc.push(last);
            if curr[..4] != *"noop"{
                let value = curr.split(" ").last()
                                .unwrap()
                                .parse::<i64>()
                                .ok()
                                .unwrap();
                acc.push(last+value);
            };
            acc
        })
        .iter()
        .enumerate()
        .filter(|i| (i.0+1)%40 == 20)
        .map(|a| ((a.0 as i64)+1)*a.1)
        .sum::<i64>() as u64
    }


    fn render(input:&str) {
        let x = input.lines().fold(vec![1],|mut acc,curr|{
            let last = *acc.last().unwrap();
            acc.push(last);
            if curr[..4] != *"noop"{
                let value = curr.split(" ").last()
                                .unwrap()
                                .parse::<i64>()
                                .ok()
                                .unwrap();
                acc.push(last+value);
            };
            acc
        })
        .iter()
        .enumerate()
        .map(|a|  {
            if ((a.0%40) as i64-a.1).abs() < 2 {
                return '#'
            }
            '.'
        }
        ).collect::<Vec<_>>();

        let lines = x.chunks(40).map(|a| a.iter().collect::<String>()).collect::<Vec<_>>();
        for line in lines {
            println!("{}",line);
        }
        
    }


    // test
    #[cfg(test)]
    mod tests {
        use super::*;
        #[test]
        fn test_signal_strenth() {
            assert_eq!(signal_strenth(include_str!("../test_input.txt")),13140);
        }

        #[test]
        fn test_render() {
            render(include_str!("../test_input.txt"));
        }
    }
    {% endhighlight %}
