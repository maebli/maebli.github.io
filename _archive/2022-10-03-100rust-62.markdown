---
layout: post
title:  "Rust challenge 62/100 - find the middle of points"
date:   2022-11-08 20:42:00 +0100
categories: rust
redirect_from:
  - /post/2022-10-03-100rust-62
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [62nd Challenge](#62nd-challenge)
    - [Challenge](#challenge)
    - [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->

## What is this :grey_question: 

The rules of the game are explained [in my original](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 62nd Challenge
### Challenge

Find the center of multiple co-ordinate points.

### Solution :white_check_mark:

Longatiude and Latitude can be easily averaged by adding the coordinates togehter and dividing by the number of components. I will use a free api to resolve strings to coordinates. The api is called GeoAdmin and is limited to Switzerland. The API requires no authentication so it is well suited for this challenge. 


And here it is, the solution 

    {% highlight bash %}
    use geocoding::{GeoAdmin,Forward,Point};

    fn main() {

        let addresses= vec!["Locarno","Lugano","Altdorf"];

        let geoadmin = GeoAdmin::new();

        let weight = 1.0/(addresses.len() as f64);
        let mut center = addresses.iter()
        .map(|address|  {
            *geoadmin.forward(address).unwrap().get(0).unwrap()
        }).fold(Point::new(0.0,0.0), |mut acc, x| {
            acc+=x;
            acc
        });

        center=center*weight;

        println!("Center: {:?}",center);
        println!("https://www.google.com/maps/search/{:?},{:?}", center.y(),center.x());
        
    }
    {% endhighlight %}

To see the source see [github](https://github.com/maebli/100rustsnippets/tree/master/lets-meet) 

Maybe I'll make this into something bigger, not sure yet. 
