---
layout: post
title:  "Rust challenge 46/100 - cli tutorial "
date:   2022-03-15 21:00:00 +0100
categories: rust
redirect_from:
  - /rust/2022/03/15/100rust-46
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [46th Challenge](#46th-challenge)
	- [Challenge](#challenge)
	- [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->

## What is this :grey_question: 

The rules of the game are explained [in my original post](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 46th Challenge
### Challenge

Going back to my original source of information I'm going to challenge my self with [chapter 12 of 'the book'](https://doc.rust-lang.org/book/ch12-00-an-io-project.html).
Insteand of doing the same example I will make the a `cat` instead of a `grep` clone. 

### Solution :white_check_mark:

Here is the comparision of `cat` and `cli-tutorial`.

	{% highlight bash %}
	$ ./cli-tutorial hello-world.txt 
	This is a test.
	This worked just like cat.
	$ cat hello-world.txt 
	This is a test.
	This worked just like cat.
	$ 
	{% endhighlight %}

And here is the very simple code for it:

	{% highlight rust %}
	use std::env;
	use std::fs;

	fn main() {
	    let args: Vec<String> = env::args().collect();

	    if args.len() != 2 {
	        panic!("This program takes exactly one argument, the file name.")
	    }

	    let filname = &args[1];
	    let contents = fs::read_to_string(filname)
	        .expect("Something went wrong reading the file");

	    print!("{}", contents);
	}
	{% endhighlight %}

See [github](https://github.com/maebli/100rustsnippets/tree/master/cli-tutorial) for today's simple snippet. 

