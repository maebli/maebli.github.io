---
layout: post
title:  "Rust challenge 12/100 - LoRaWAN MIC Calculation "
date:   2021-10-31 21:00:00 +0100
categories: rust
redirect_from:
  - /post/2021-10-31-100rust-12
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this?](#what-is-this)
- [12th Challenge](#12th-challenge)
	- [Challenge](#challenge)
	- [Solution](#solution)

<!-- /MarkdownTOC -->

## What is this?

The rules of the game are explained [in my original post](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 12th Challenge
### Challenge

* [Calculate MIC](https://github.com/brocaar/lorawan/blob/61c36dbfb10a347c4f739ac5fe9a973a84047130/phypayload.go#L588) according to TTN implementation in GO. 


### Solution


	{% highlight rust %}
	use serde::{Deserialize, Serialize};
	use aes::Aes128;
	use cmac::{Cmac, Mac, NewMac};
	use std::result::Result;

	fn main() {

	    let payload = PHYPayload{
	        mhdr: 0,
	        mac_payload: JoinRequest{
	            join_eui: 0,
	            dev_eui: 0,
	            dev_nonce: 0
	        },
	        mic: 0
	    };

	    let key = vec![0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
	    println!("{:?}",payload.calculate_mic(&key[..]));
	}


	#[derive(Serialize, Deserialize)]
	struct JoinRequest{
	    join_eui:u64,
	    dev_eui:u64,
	    dev_nonce:u16
	}

	#[derive(Serialize, Deserialize)]
	struct PHYPayload<T>{
	    mhdr:u8,
	    mac_payload:T,
	    mic:u32
	}

	impl PHYPayload<JoinRequest> {
	    fn calculate_mic(&self, key:&[u8]) -> Result<Vec<u8>, &str>{
	        let mut serializedPayload = bincode::serialize(&self.mhdr)
	            .expect("Failed to serialize MHDR.");
	        serializedPayload.append(&mut bincode::serialize(&self.mac_payload)
	            .expect("Failed to serialize MAC Payload."));
	        let mut mac = Cmac::<Aes128>::new_from_slice(key)
	            .expect("Bad AES128 Key.");
	        mac.update(&serializedPayload[..]);
	        let result = mac.finalize();
	        let tag_bytes = result.into_bytes();
	        Ok(Vec::from(&tag_bytes[0..4]))
	    }
	}

	{% endhighlight %}


See [github](https://github.com/maebli/100rustsnippets/tree/master/calculateUplinkDataMIC) and [playground](https://play.rust-lang.org/?version=stable&edition=2018&gist=d83dca9689ce65752d0f93a3544e458a)
