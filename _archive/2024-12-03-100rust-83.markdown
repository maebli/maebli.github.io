---
layout: post
title:  "Rust challenge 83/100 - aoc2024 day 3"
date:   2024-12-03 12:00:00 +0100
categories: rust
redirect_from:
  - /rust/2024/12/03/100rust-83
---


#  Table of content
- [Table of content](#table-of-content)
  - [What is this :grey\_question:](#what-is-this-grey_question)
  - [83rd Challenge](#83rd-challenge)
    - [Challenge](#challenge)
    - [Solution :white\_check\_mark:](#solution-white_check_mark)

## What is this :grey_question: 

The rules of the game are explained [in my original](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 83rd Challenge
### Challenge

Like every year, I am going to participate in the [Advent of Code](https://adventofcode.com/). 
Lets get started with [advent of code](https://adventofcode.com/2024/day/3)

### Solution :white_check_mark:

```rust

#[derive(Debug)]
enum Token {
    Number(usize),
    Multiply,
}


fn main() {

    let input = include_str!("input.txt");

    let chars = input.chars();

    let mut tokens = Vec::new();

    let mut chars = chars.into_iter().peekable();


    let mut enabled= true;
    while let Some(c) = chars.next() {
        match c {
            'm' => {
                if !enabled {
                    continue;
                }
                if let Some('u') = chars.next() {
                    if let Some('l') = chars.next() {
                        if let Some('(') = chars.next() {
                            tokens.push(Token::Multiply);
                            let mut number = 0; 
                            while chars.peek().unwrap().is_digit(10) {
                                if let Some(c) = chars.next() {
                                    if c.is_digit(10) {
                                        number = number * 10 + c.to_digit(10).unwrap() as usize;
                                    }
                                }
                            }
                            if chars.next() != Some(','){
                                tokens.pop();
                                continue;
                            }
                            tokens.push(Token::Number(number));

                            let mut number = 0;
                            while chars.peek().unwrap().is_digit(10) {
                                if let Some(c) = chars.next() {
                                    if c.is_digit(10) {
                                        number = number * 10 + c.to_digit(10).unwrap() as usize;
                                    }
                                }
                            }
                            if chars.next() != Some(')'){
                                tokens.pop();
                                tokens.pop();
                                continue;
                            }
                            tokens.push(Token::Number(number));
                        }
                    }
                }
            }
            'd' => {
                if enabled && chars.next() == Some('o') 
                           && chars.next() == Some('n') 
                           && chars.next() == Some('\'')
                           && chars.next() == Some('t') 
                           && chars.next() == Some('(') 
                           && chars.next() == Some(')') {
                    enabled = false;
                }else if !enabled && chars.next() == Some('o') && chars.next() == Some('(') && chars.next() == Some(')') {
                    enabled = true;
                }
            }
            _ => (),
        }
    }

    let x= tokens.windows(3).fold(0, |acc, x| {
        match x {
            [ Token::Multiply,Token::Number(a), Token::Number(b)] => {
                acc + a * b
            }
            _ => acc
        }
    });

    println!("Result: {:?}", x);


}

```


