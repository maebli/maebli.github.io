---
layout: post
title:  "Rust challenge 33/100 - advent of code 2021 day 3 part 1 & 2"
date:   2021-12-03 21:00:00 +0100
categories: rust
redirect_from:
  - /post/2021-12-03-100rust-33
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [33rd Challenge](#33rd-challenge)
	- [Challenge](#challenge)
	- [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->
![](/assets/img/aoc.png)
## What is this :grey_question: 

The rules of the game are explained [in my original post](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 33rd Challenge
### Challenge

Today I'm solving today's [AoC day 3 2021](https://adventofcode.com/2021/day/3). So far only part one is done. Part two coming soon.. :sweat:.


### Solution :white_check_mark:

	{% highlight rust %}
	fn main() {

	    let x:Vec<Vec<_>> = DIAGNOSTIC_REPORT.lines()
	        .map(|l| {
	            l.as_bytes()
	                .into_iter()
	                .map(|x|*x == b'1')
	                .collect()
	        })
	        .collect();

	    let length = x.len() as u32;

	    let bit_count = x
	        .iter()
	        .fold(vec![0; length as usize], |acc:Vec<u32>, inst|{
	        acc
	            .iter().zip(inst.iter())
	            .map(|x| {match x.1
	                {
	                    true =>{ *x.0 + 1},
	                    false => *x.0
	            }})
	            .collect()
	    });

	    println!("{:?}",bit_count);

	    let gamma= bit_count.iter()
	        .map(|x|{ (*x > length/2) as u32})
	        .rev()
	        .enumerate()
	        .fold(0,|acc, inst|{
	            acc | (inst.1 << (inst.0 as u32))
	            }
	        );

	    let epsilon = (!gamma) & 0b111111111111;
	    println!("{}*{} = {}",gamma,epsilon,gamma*epsilon);

	}

	const DIAGNOSTIC_REPORT:&str ="00100
	11110
	10110
	10111
	10101
	01111
	00111
	11100
	10000
	11001
	00010
	01010";
	{% endhighlight %}


To see the full source see [github](https://github.com/maebli/100rustsnippets/tree/master/aoc-2021-day3) and see the live demo in [playground](https://play.rust-lang.org/?version=stable&edition=2021&gist=1843da9bd20744f2ef94f8bd5cee0f61). 


Saying part two was a hassle is an under statement. The solution outputs to binary vector which need to be multiplied. I did that manually as I lost motivation in part two :star: unlocked!
Using transpose helps, starting to feel like this AOC stuff would be easier in Matlab / octave. 

	{% highlight rust %}
	fn main() {

	    let mut input: Vec<Vec<u32>> = DIAGNOSTIC_REPORT.lines()
	        .map(|l| {
	            l.as_bytes()
	                .into_iter()
	                .map(|x| (*x == b'1') as u32)
	                .collect()
	        })
	        .collect();

	    let mut a:usize = 0;

	    let mut x = input.clone();

	    while (*x).len()>1 {
	        let bit_count = find_most_common_bits_per_row(x.clone());
	        x.retain(|x|{x[a] == bit_count[a]});
	        a+= 1;
	    }

	    println!("{:?}",x);

	    let mut a:usize = 0;
	    while (*input).len()>1 {
	        let bit_count = find_most_common_bits_per_row(input.clone());
	        input.retain(|x|{x[a] != bit_count[a]});
	        a+= 1;
	    }

	    println!("{:?}",input);

	}


	fn find_most_common_bits_per_row(x: Vec<Vec<u32>>) -> Vec<u32> {
	    let length = x.len() as u32;
	    let x = transpose(x);
	    let bit_count: Vec<u32> = x.iter()
	        .map(|x| {
	            x.iter().fold(0, |acc, inst| { acc + inst })
	        })
	        .map(|x| { (x as f32 >= (length as f32 / 2.0)) as u32 })
	        .collect();
	    bit_count
	}

	/// Source : https://stackoverflow.com/questions/64498617/how-to-transpose-a-vector-of-vectors-in-rust
	fn transpose<T>(v: Vec<Vec<T>>) -> Vec<Vec<T>> {
	    assert!(!v.is_empty());
	    let len = v[0].len();
	    let mut iters: Vec<_> = v.into_iter().map(|n| n.into_iter()).collect();
	    (0..len)
	        .map(|_| {
	            iters
	                .iter_mut()
	                .map(|n| n.next().unwrap())
	                .collect::<Vec<T>>()
	        })
	        .collect()
	}


	const DIAGNOSTIC_REPORT:&str ="00100
	11110
	10110
	10111
	10101
	01111
	00111
	11100
	10000
	11001
	00010
	01010";
	{% endhighlight %}

[github part 2](https://github.com/maebli/100rustsnippets/tree/master/aoc-2021-day3-part2)
[playground part 2](https://play.rust-lang.org/?version=stable&edition=2021&gist=2525d7a7193eba078b0a6672020ce4e3)

